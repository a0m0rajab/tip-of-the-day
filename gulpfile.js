/* eslint-disable no-console */

const gulp = require("gulp");
const plugins = require("gulp-load-plugins")();
const del = require("del");

const buildIndex = require("./src/home-index/build");

const files = {
  html: "public/**/*.html",
  scss: {
    src: "scss/index.scss",
    dest: "build/assets"
  },
  static: ["public/**/*.png", "public/**/*.ico", "public/manifest.json"],
  build: "build"
};

const clean = () => del([`${files.build}/*`]);

const buildDataSources = callback => buildIndex(callback);

const buildHTML = () =>
  gulp
    .src(files.html)
    .pipe(
      plugins.htmlmin({
        collapseBooleanAttributes: true,
        collapseWhitespace: true,
        includeAutoGeneratedTags: false,
        minifyCSS: true,
        minifyJS: true,
        processConditionalComments: true,
        removeComments: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        useShortDoctype: true
      })
    )
    .pipe(gulp.dest(files.build))
    .on("error", console.error);

const buildCSS = () =>
  gulp
    .src(files.scss.src)
    .pipe(plugins.sass().on("error", plugins.sass.logError))
    .pipe(
      plugins.cleanCss({
        level: {
          2: {
            all: true
          }
        }
      })
    )
    .pipe(
      plugins.rename({
        basename: "styles"
      })
    )
    .pipe(gulp.dest(files.scss.dest));

const buildStatic = () =>
  gulp
    .src(files.static)
    .pipe(gulp.dest(files.build))
    .on("error", console.error);

const build = gulp.series(
  clean,
  buildDataSources,
  gulp.parallel(buildHTML, buildCSS, buildStatic)
);

const watch = () => {
  gulp.watch(files.html, buildHTML);
  gulp.watch(files.css, buildCSS);
  gulp.watch(files.static, buildStatic);
};

exports.build = build;
exports.watch = watch;

exports.default = gulp.series(build, watch);
